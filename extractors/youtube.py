#extractors/youtube.py

from yt_dlp import YoutubeDL
import os

def is_valid(url: str) -> bool:
    """
    V√©rifie si l'URL est une vid√©o YouTube.
    Utilis√© pour choisir automatiquement cet extracteur.
    """
    return "youtube.com/watch" in url or "youtu.be/" in url


def search(query: str):
    """
    Recherche des vid√©os YouTube correspondant √† la requ√™te (texte).
    Retourne une liste d'entr√©es (chaque entr√©e = dict avec 'title', 'url', etc.).
    """
    ydl_opts = {
        'quiet': True,                        # Pas de spam console
        'default_search': 'ytsearch3',        # Recherche top 3 vid√©os
        'nocheckcertificate': True,
        'ignoreerrors': True,
        'extract_flat': True,                 # Ne pas t√©l√©charger, juste r√©cup√©rer les m√©tadonn√©es
    }

    with YoutubeDL(ydl_opts) as ydl:
        results = ydl.extract_info(f"ytsearch3:{query}", download=False)
        return results.get("entries", []) if results else []


def download(url: str, ffmpeg_path: str, cookies_file: str = None):
    """
    T√©l√©charge une vid√©o YouTube sous forme audio MP3.

    Cette fonction utilise ``yt-dlp`` pour r√©cup√©rer la meilleure piste
    audio disponible et la convertir en MP3 gr√¢ce √† ffmpeg.  De
    nombreuses options sont d√©finies pour tenter de contourner les
    restrictions YouTube en simulant un navigateur classique et en
    limitant la vitesse.  Si un fichier de cookies est fourni, il
    sera utilis√© pour authentifier les requ√™tes et ainsi √©viter
    l'apparition du message ¬´‚ÄØSign in to confirm you're not a bot‚ÄØ¬ª.

    Parameters
    ----------
    url: str
        L'URL compl√®te de la vid√©o YouTube.
    ffmpeg_path: str
        Le chemin vers l'ex√©cutable ``ffmpeg``.
    cookies_file: str, optional
        Chemin vers un fichier de cookies (format Netscape).  Si
        ``None``, aucune authentification n'est utilis√©e.

    Returns
    -------
    tuple
        (chemin du fichier MP3, titre, dur√©e en secondes)
    """
    # Cr√©e le dossier de sortie si n√©cessaire
    os.makedirs('downloads', exist_ok=True)

    # Options partag√©es pour yt‚Äëdlp.  Voir la documentation pour plus
    # d'informations : yt‚Äëdlp est un fork de youtube‚Äëdl riche en
    # fonctionnalit√©s„Äê503558306535876‚Ä†L122-L124„Äë.
    ydl_opts = {
        'format': 'bestaudio/best',
        'outtmpl': 'downloads/greg_audio.%(ext)s',
        'postprocessors': [
            {
                'key': 'FFmpegExtractAudio',
                'preferredcodec': 'mp3',
                'preferredquality': '192',
            }
        ],
        'ffmpeg_location': ffmpeg_path,
        'nocheckcertificate': True,
        'ignoreerrors': False,
        'quiet': False,
        'sleep_interval_requests': 1,
        'ratelimit': 5.0,
        'extractor_args': {
            'youtube': ['--no-check-certificate', '--force-ipv4']
        },
        'http_headers': {
            'User-Agent': (
                'Mozilla/5.0 (Windows NT 10.0; Win64; x64) '
                'AppleWebKit/537.36 (KHTML, like Gecko) '
                'Chrome/115.0.0.0 Safari/537.36'
            )
        },
        'youtube_include_dash_manifest': False,
    }
    # Ajout des cookies si disponibles
    if cookies_file and os.path.exists(cookies_file):
        ydl_opts['cookiefile'] = cookies_file

    print(f"üé© Extraction YouTube : {url}")
    with YoutubeDL(ydl_opts) as ydl:
        info = ydl.extract_info(url, download=False)
        title = info.get('title', 'Musique inconnue')
        duration = info.get('duration', 0)
        # T√©l√©chargement effectif
        ydl.download([url])
        filename = ydl.prepare_filename(info).replace(".webm", ".mp3").replace(".m4a", ".mp3")

    return filename, title, duration


async def stream(url_or_query: str, ffmpeg_path: str, cookies_file: str = None):
    """
    R√©cup√®re un flux audio direct pour une vid√©o YouTube sans
    t√©l√©chargement.  Le flux est renvoy√© sous forme d'objet
    ``discord.FFmpegPCMAudio`` pr√™t √† √™tre jou√©.

    Si ``url_or_query`` ne contient pas ``"http"``, la cha√Æne est
    interpr√©t√©e comme une recherche et la premi√®re vid√©o du r√©sultat
    sera utilis√©e.  Cette m√©thode s'efforce de limiter l'impact
    d'√©ventuelles protections anti‚Äëbots en r√©utilisant les m√™mes
    options que ``download()`` et en utilisant un fichier de cookies
    le cas √©ch√©ant.

    Parameters
    ----------
    url_or_query: str
        L'URL compl√®te de la vid√©o ou un terme de recherche.
    ffmpeg_path: str
        Le chemin vers l'ex√©cutable ``ffmpeg``.
    cookies_file: str, optional
        Chemin vers le fichier de cookies Netscape pour YouTube.

    Returns
    -------
    tuple
        (source, titre) o√π ``source`` est une instance de
        ``discord.FFmpegPCMAudio`` et ``titre`` est une cha√Æne.
    """
    import asyncio
    import discord
    ydl_opts = {
        'format': 'bestaudio/best',
        'quiet': True,
        'default_search': 'ytsearch3',
        'nocheckcertificate': True,
        'extract_flat': False,
        'ignoreerrors': True,
        'http_headers': {
            'User-Agent': (
                'Mozilla/5.0 (Windows NT 10.0; Win64; x64) '
                'AppleWebKit/537.36 (KHTML, like Gecko) '
                'Chrome/115.0.0.0 Safari/537.36'
            )
        },
    }
    if cookies_file and os.path.exists(cookies_file):
        ydl_opts['cookiefile'] = cookies_file
    loop = asyncio.get_event_loop()
    def extract():
        with YoutubeDL(ydl_opts) as ydl:
            return ydl.extract_info(url_or_query, download=False)
    try:
        data = await loop.run_in_executor(None, extract)
        if not data:
            raise RuntimeError("Aucun r√©sultat YouTube")
        info = data['entries'][0] if 'entries' in data else data
        stream_url = info['url']
        title = info.get('title', 'Musique inconnue')
        source = discord.FFmpegPCMAudio(
            stream_url,
            before_options="-reconnect 1 -reconnect_streamed 1 -reconnect_delay_max 5",
            options="-vn",
            executable=ffmpeg_path,
        )
        return source, title
    except Exception as e:
        raise RuntimeError(f"√âchec de l'extraction YouTube : {e}")